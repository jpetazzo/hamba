#!/bin/sh
set -e

# Reminder: we will use files in $HOME, hence the use of ~
# to anchor paths everywhere. HOME can be overridden when
# running this container.

# This is a workaround for systems that don't break the
# container command line into separate arguments.
# If the first argument passed to hamba contains a space,
# we will re-execute ourselves to fix the problem.
case "$1" in
*\ *)
    echo "First command-line argument contains a space."
    echo "Re-execing ourselves to work around the issue."
    exec $0 $*
    ;;
esac

# Wait until haproxy.new exists. When it does, move it to
# haproxy.cfg and start a new HAProxy instance to replace
# the existing one. If a PID file is found (indicating that
# another instance of HAProxy was already running), tell the
# new HAProxy to terminate the old ones gracefully.
# Repeat the whole thing forever.
main () {
    echo "Starting main loop."
    while : ; do
        while ! [ -f ~/haproxy.new ]; do
            sleep 1
        done
        echo "Found haproxy.new."
        mv ~/haproxy.new ~/haproxy.chk
        echo "Configuration validation."
        if haproxy -f ~/haproxy.chk -c; then
            echo "Configuration validation PASSED."
            mv ~/haproxy.chk ~/haproxy.cfg
        else
            echo "Configuration validation FAILED."
            echo "Waiting for new configuration."
            continue
        fi
        echo "Starting new HAProxy instance."
        if [ -f ~/haproxy.pid ]; then
            echo "Found haproxy.pid."
            echo "The following PID(s) will be terminated:"
            cat ~/haproxy.pid
            PLEASESTOP="-sf $(cat ~/haproxy.pid)"
        else
            PLEASESTOP=
        fi
        haproxy -f ~/haproxy.cfg -p ~/haproxy.pid -D $PLEASESTOP
        echo "Started new HAProxy instance."
    done
}

# Output a valid HAProxy configuration.
config () {
    # If the first parameter contains a colon,
    # assume that it's addr:port. Otherwise, assume
    # that it's just a port number and put * in front.
    case "$1" in
        *:*) BIND="$1" ;;
        *) BIND="*:$1" ;;
    esac

    # Generate the global section of the config file.
    cat <<EOF
global
  daemon
  maxconn 256

defaults
  mode tcp
  timeout connect 5000ms
  timeout client 50000ms
  timeout server 50000ms

frontend hamba-in
  bind $BIND
  default_backend hamba-out

backend hamba-out
EOF

    # Now generate all the backend entries.
    shift
    while [ "$1" ]; do
        # If the backend contains a colon,
        # assume that it's addr:port. Otherwise,
        # assume that the backend address and port
        # are given by two separate parameters.
        case "$1" in
        *:*)
            echo "  server $(echo $1 | tr : -) $1 maxconn 32 check"
            shift
            ;;
        *)
            echo "  server $1-$2 $1:$2 maxconn 32 check"
            shift
            shift
            ;;
        esac
    done

    # If ADMIN is set, enable admin.
    if [ "$ADMIN" ]; then cat <<EOF
listen admin
  mode http
  bind $ADMIN
  stats enable
EOF
    fi
}

# Hook to deal with signals correctly.
stop () {
    echo "Stopping main loop."
    # TODO nicely terminate HAProxy
    exit
}
trap stop TERM

case "$1" in
debugconfig)
    shift
    config "$@"
    ;;
reconfigure)
    shift
    config "$@" >~/haproxy.tmp
    if ! haproxy -f ~/haproxy.tmp -c; then
        echo -n "WARNING: there were validation errors. "
        echo -n "Continuing anyway, but the load balancer "
        echo "will probably not be reconfigured."
    fi
    mv ~/haproxy.tmp ~/haproxy.new
    ;;
run)
    shift
    if [ -n "$1" ]; then
        echo "Initial HAProxy configuration was provided."
        config "$@" >~/haproxy.new
    else
        echo "Initial HAProxy configuration was NOT provided."
        echo "HAProxy will not be started until one is created."
    fi
    main
    ;;
showconfig)
    cat ~/haproxy.cfg
    ;;
"")
    echo "Must specify at least one parameter:"
    echo "  hamba <debugconfig> <configuration...>"
    echo "  hamba <reconfigure> <configuration...>"
    echo "  hamba <run> [configuration...]"
    echo "  hamba <showconfig>"
    echo "  hamba <configuration...>"
    echo "Configuration is:"
    echo "  [frontendaddr:]<frontendport> [backendaddr backendport] [...]"
    echo "  [frontendaddr:]<frontendport> [backendaddr:backendport] [...]"
    ;;
*)
    # Fallback to old behavior where config is the sole argument.
    config "$@" >~/haproxy.new
    main
    ;;
esac

